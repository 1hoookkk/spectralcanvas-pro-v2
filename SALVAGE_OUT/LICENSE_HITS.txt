C:\spectralCanvas Pro\build_clean\CMakeFiles\4.0.0\CompilerIdC\CMakeCCompilerId.c:491:#elif defined(__FreeBSD__) || defined(__FreeBSD)
C:\spectralCanvas Pro\build_clean\CMakeFiles\4.0.0\CompilerIdC\CMakeCCompilerId.c:492:# define PLATFORM_ID "FreeBSD"
C:\spectralCanvas Pro\build_clean\CMakeFiles\4.0.0\CompilerIdC\CMakeCCompilerId.c:494:#elif defined(__NetBSD__) || defined(__NetBSD)
C:\spectralCanvas Pro\build_clean\CMakeFiles\4.0.0\CompilerIdC\CMakeCCompilerId.c:495:# define PLATFORM_ID "NetBSD"
C:\spectralCanvas Pro\build_clean\CMakeFiles\4.0.0\CompilerIdC\CMakeCCompilerId.c:497:#elif defined(__OpenBSD__) || defined(__OPENBSD)
C:\spectralCanvas Pro\build_clean\CMakeFiles\4.0.0\CompilerIdC\CMakeCCompilerId.c:498:# define PLATFORM_ID "OpenBSD"
C:\spectralCanvas Pro\build_clean\CMakeFiles\4.0.0\CompilerIdC\CMakeCCompilerId.c:530:#elif defined(__bsdos__)
C:\spectralCanvas Pro\build_clean\CMakeFiles\4.0.0\CompilerIdC\CMakeCCompilerId.c:531:# define PLATFORM_ID "BSDOS"
C:\spectralCanvas Pro\build_clean\CMakeFiles\4.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp:470:#elif defined(__FreeBSD__) || defined(__FreeBSD)
C:\spectralCanvas Pro\build_clean\CMakeFiles\4.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp:471:# define PLATFORM_ID "FreeBSD"
C:\spectralCanvas Pro\build_clean\CMakeFiles\4.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp:473:#elif defined(__NetBSD__) || defined(__NetBSD)
C:\spectralCanvas Pro\build_clean\CMakeFiles\4.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp:474:# define PLATFORM_ID "NetBSD"
C:\spectralCanvas Pro\build_clean\CMakeFiles\4.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp:476:#elif defined(__OpenBSD__) || defined(__OPENBSD)
C:\spectralCanvas Pro\build_clean\CMakeFiles\4.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp:477:# define PLATFORM_ID "OpenBSD"
C:\spectralCanvas Pro\build_clean\CMakeFiles\4.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp:509:#elif defined(__bsdos__)
C:\spectralCanvas Pro\build_clean\CMakeFiles\4.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp:510:# define PLATFORM_ID "BSDOS"
C:\spectralCanvas Pro\build_minimal\CMakeFiles\4.0.0\CompilerIdC\CMakeCCompilerId.c:491:#elif defined(__FreeBSD__) || defined(__FreeBSD)
C:\spectralCanvas Pro\build_minimal\CMakeFiles\4.0.0\CompilerIdC\CMakeCCompilerId.c:492:# define PLATFORM_ID "FreeBSD"
C:\spectralCanvas Pro\build_minimal\CMakeFiles\4.0.0\CompilerIdC\CMakeCCompilerId.c:494:#elif defined(__NetBSD__) || defined(__NetBSD)
C:\spectralCanvas Pro\build_minimal\CMakeFiles\4.0.0\CompilerIdC\CMakeCCompilerId.c:495:# define PLATFORM_ID "NetBSD"
C:\spectralCanvas Pro\build_minimal\CMakeFiles\4.0.0\CompilerIdC\CMakeCCompilerId.c:497:#elif defined(__OpenBSD__) || defined(__OPENBSD)
C:\spectralCanvas Pro\build_minimal\CMakeFiles\4.0.0\CompilerIdC\CMakeCCompilerId.c:498:# define PLATFORM_ID "OpenBSD"
C:\spectralCanvas Pro\build_minimal\CMakeFiles\4.0.0\CompilerIdC\CMakeCCompilerId.c:530:#elif defined(__bsdos__)
C:\spectralCanvas Pro\build_minimal\CMakeFiles\4.0.0\CompilerIdC\CMakeCCompilerId.c:531:# define PLATFORM_ID "BSDOS"
C:\spectralCanvas Pro\build_minimal\CMakeFiles\4.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp:470:#elif defined(__FreeBSD__) || defined(__FreeBSD)
C:\spectralCanvas Pro\build_minimal\CMakeFiles\4.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp:471:# define PLATFORM_ID "FreeBSD"
C:\spectralCanvas Pro\build_minimal\CMakeFiles\4.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp:473:#elif defined(__NetBSD__) || defined(__NetBSD)
C:\spectralCanvas Pro\build_minimal\CMakeFiles\4.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp:474:# define PLATFORM_ID "NetBSD"
C:\spectralCanvas Pro\build_minimal\CMakeFiles\4.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp:476:#elif defined(__OpenBSD__) || defined(__OPENBSD)
C:\spectralCanvas Pro\build_minimal\CMakeFiles\4.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp:477:# define PLATFORM_ID "OpenBSD"
C:\spectralCanvas Pro\build_minimal\CMakeFiles\4.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp:509:#elif defined(__bsdos__)
C:\spectralCanvas Pro\build_minimal\CMakeFiles\4.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp:510:# define PLATFORM_ID "BSDOS"
C:\spectralCanvas Pro\Source\Core\MessageBus_Old.h:8:// Based on Dmitry Vyukov's bounded SPSC queue design
C:\spectralCanvas Pro\Source\Core\SpectrogramRenderer.h:14:const float h = juce::jlimit(0.0f, 1.0f, normFreq);
C:\spectralCanvas Pro\Source\Core\SpectrogramRenderer.h:15:const float v = juce::jlimit(0.0f, 1.0f, std::pow(normMag, 0.6f)); // perceptual
C:\spectralCanvas Pro\Source\Core\SpectrogramRenderer.h:21:const float sat = juce::jlimit(0.2f, 0.95f, 0.65f + 0.25f * (1.0f - v));
C:\spectralCanvas Pro\Source\Core\SpectrogramRenderer.h:61:const int frame = juce::jlimit(0, numFrames - 1, (int)std::round(t * (numFrames - 1)));
C:\spectralCanvas Pro\Source\Core\SpectrogramRenderer.h:73:const int bin = juce::jlimit(0, fftSize / 2 - 1, (int)std::round(nf * (fftSize / 2 - 1)));
C:\spectralCanvas Pro\Source\Core\SpectrogramRenderer.h:78:const float normMag = juce::jlimit(0.0f, 1.0f, (db + 80.0f) / 80.0f);
C:\spectralCanvas Pro\Source\DSP\MorphFilter.h:128:int resIndex = juce::jlimit(0, 255, (int)(currentResonance * 25.5f));
C:\spectralCanvas Pro\Source\DSP\MorphFilter.h:143:void setMorph(float value) noexcept { targetMorph = juce::jlimit(0.0f, 1.0f, value); }
C:\spectralCanvas Pro\Source\DSP\MorphFilter.h:144:void setCutoff(float hz) noexcept { targetCutoff = juce::jlimit(20.0f, 20000.0f, hz); }
C:\spectralCanvas Pro\Source\DSP\MorphFilter.h:145:void setResonance(float q) noexcept { targetResonance = juce::jlimit(0.1f, 10.0f, q); }
C:\spectralCanvas Pro\Source\DSP\MorphFilter.h:146:void setDrive(float db) noexcept { targetDrive = juce::jlimit(0.0f, 24.0f, db); }
C:\spectralCanvas Pro\Source\DSP\SynthEngine.h:91:// Band-limited noise filter
C:\spectralCanvas Pro\Source\GUI\CanvasComponent_Backup.cpp:107:float brightness = juce::jlimit(0.0f, 1.0f, (dbMagnitude + 80.0f) / 80.0f);
C:\spectralCanvas Pro\Source\GUI\CanvasComponent_Backup.cpp:110:float hue = juce::jlimit(0.0f, 1.0f, 0.76f - frequency * 0.24f); // 0.76=purple, 0.52=cyan
C:\spectralCanvas Pro\Source\GUI\CanvasComponent_Backup.cpp:227:// Limit stroke length for performance
C:\spectralCanvas Pro\Source\GUI\CanvasComponent_Backup.cpp:256:if (completedStrokes.size() > 50) // Limit history
C:\spectralCanvas Pro\Source\GUI\CanvasComponent_Backup.cpp:279:currentBrushSize = juce::jlimit(1.0f, 128.0f, currentBrushSize + delta);
C:\spectralCanvas Pro\Source\GUI\CanvasComponent_Backup.cpp:375:return juce::Point<float>(juce::jlimit(0.0f, 1.0f, u),
C:\spectralCanvas Pro\Source\GUI\CanvasComponent_Backup.cpp:376:juce::jlimit(0.0f, 1.0f, v));
C:\spectralCanvas Pro\Source\GUI\CanvasComponent_Backup.cpp:527:const float frequencyRatio = juce::jlimit(0.0f, 1.0f, point.spectralPos.y);
C:\spectralCanvas Pro\Source\GUI\CanvasComponent_Backup.cpp:543:maskColumn.values[bin] = juce::jlimit(0.0f, 3.0f,
C:\spectralCanvas Pro\Source\GUI\CanvasComponent_Minimal.cpp:95:// Limit stroke length for performance
C:\spectralCanvas Pro\Source\GUI\CanvasComponent_Minimal.cpp:137:currentBrushSize = juce::jlimit(1.0f, 128.0f, currentBrushSize + delta);
C:\spectralCanvas Pro\Source\GUI\CanvasComponent_Minimal.cpp:202:return juce::Point<float>(juce::jlimit(0.0f, 1.0f, u),
C:\spectralCanvas Pro\Source\GUI\CanvasComponent_Minimal.cpp:203:juce::jlimit(0.0f, 1.0f, v));
C:\spectralCanvas Pro\Source\GUI\CanvasComponent.cpp:215:// Limit stroke length for performance
C:\spectralCanvas Pro\Source\GUI\CanvasComponent.cpp:257:currentBrushSize = juce::jlimit(1.0f, 128.0f, currentBrushSize + delta);
C:\spectralCanvas Pro\Source\GUI\CanvasComponent.cpp:367:return juce::Point<float>(juce::jlimit(0.0f, 1.0f, u),
C:\spectralCanvas Pro\Source\GUI\CanvasComponent.cpp:368:juce::jlimit(0.0f, 1.0f, v));
C:\spectralCanvas Pro\Source\GUI\CanvasComponent.cpp:559:const float yNorm = juce::jlimit(0.0f, 1.0f, (y - bounds.getY()) / bounds.getHeight());
C:\spectralCanvas Pro\Source\GUI\CanvasComponent.cpp:560:const int k = juce::jlimit(1, kNumBins - 2,
C:\spectralCanvas Pro\Source\GUI\CanvasComponent.cpp:618:const int k440 = juce::jlimit(1, 256, static_cast<int>(std::round(440.0 * fftSize / sr)));
C:\spectralCanvas Pro\Source\Viz\backends\D3D11Renderer.cpp:736:deviceContext_->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);
C:\spectralCanvas Pro\Source\Viz\backends\D3D11Renderer.cpp:909:deviceContext_->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);
C:\spectralCanvas Pro\Source\Viz\RenderThread.h:90:bool submitCommand(const RenderCommand& cmd) noexcept;
C:\spectralCanvas Pro\Source\Viz\RenderThread.h:92:bool submitCommand(CommandType type, Args&&... args) noexcept;
C:\spectralCanvas Pro\Source\Viz\RenderThread.h:219:bool RenderThread::submitCommand(CommandType type, Args&&... args) noexcept
C:\spectralCanvas Pro\Source\Viz\RenderThread.h:223:// Omitted for brevity, but would handle packing args into cmd.data
C:\spectralCanvas Pro\Source\Viz\RenderThread.h:224:return submitCommand(cmd);
C:\spectralCanvas Pro\Source\SpectralCanvasProAudioProcessor.cpp:167:const float oscGain = juce::jlimit(1.0e-6f, 1.0f, oscGainRaw);  // Clamp gain
C:\spectralCanvas Pro\Source\SpectralCanvasProAudioProcessor.cpp:232:// If buffer is still silent, emit a -36 dB sine for 120 ms every second
C:\spectralCanvas Pro\Source\SpectralCanvasProEditor.cpp:20:setResizeLimits(800, 600, 2400, 1600);
